РУКОВОДСТВО ПО ПРОЕКТУ VAGVIN

Этот документ содержит инструкции по настройке, запуску и тестированию проекта Vagvin.

ОБЗОР ПРОЕКТА

Vagvin - это веб-приложение на базе Django. Данное руководство поможет вам выполнить необходимые шаги для запуска проекта локально для разработки и тестирования, а также объяснит, как взаимодействовать с инфраструктурой тестирования.

ПРЕДВАРИТЕЛЬНЫЕ ТРЕБОВАНИЯ

Перед началом убедитесь, что у вас установлено следующее:

* Python (рекомендуется версия 3.10+)
* pip (установщик пакетов Python)
* Docker и Docker Compose (для контейнеризированного развертывания)
* Git (для контроля версий)
* Предпочитаемая система баз данных (например, PostgreSQL). Проект по умолчанию настроен на использование PostgreSQL.

НАЧАЛО РАБОТЫ

Клонирование репозитория:

Выполните в терминале:
git clone <URL_репозитория>
cd vagvin
Замените <URL_репозитория> на фактический URL вашего Git репозитория.

Настройка окружения:

Настоятельно рекомендуется использовать виртуальное окружение для проектов Python.
Выполните в терминале:
python -m venv .venv
Для Windows:
.venv\Scripts\activate
Для macOS/Linux:
source .venv/bin/activate

Установите необходимые пакеты Python:
Выполните в терминале:
pip install -r requirements.txt

Переменные окружения:

Проект использует переменные окружения для конфигурации. Создайте файл .env в корневом каталоге проекта, скопировав файл-пример:
Выполните в терминале:
cp .env.example .env

Обновите файл .env вашими специфическими конфигурациями, особенно учетными данными базы данных, секретным ключом и настройками отладки.
Ключевые переменные для настройки в .env:
* SECRET_KEY: Надежный, уникальный секретный ключ.
* DEBUG: Установите True для разработки, False для продакшена.
* DATABASE_URL: Строка подключения к вашей базе данных (например, postgres://user:password@host:port/dbname).
* ALLOWED_HOSTS: Список хостов/доменов через запятую, которые может обслуживать сайт.

ЗАПУСК ПРОЕКТА

Запуск с использованием сервера разработки Django:

Это самый быстрый способ запустить проект для локальной разработки.
1. Примените миграции базы данных:
   Выполните в терминале:
   python manage.py migrate

2. Соберите статические файлы (если это не делается автоматически при DEBUG=True):
   Выполните в терминале:
   python manage.py collectstatic --noinput

3. Запустите сервер разработки:
   Выполните в терминале:
   python manage.py runserver
   По умолчанию сервер будет доступен по адресу http://127.0.0.1:8000/.

Запуск с использованием Docker:

Проект также можно запустить с использованием Docker и Docker Compose для контейнеризированной среды.
1. Убедитесь, что ваш файл .env настроен правильно, особенно DATABASE_URL, чтобы он указывал на сервис PostgreSQL, определенный в docker-compose.yml (обычно postgres://youruser:yourpassword@db:5432/yourdatabase).

2. Соберите и запустите контейнеры:
   Выполните в терминале:
   docker-compose up --build
   Чтобы запустить в фоновом режиме (detached mode):
   docker-compose up -d --build

3. Приложение будет доступно (обычно по адресу http://localhost:8000 или как настроено в вашем nginx.conf, если Nginx является частью Docker-конфигурации).

4. Чтобы остановить контейнеры:
   Выполните в терминале:
   docker-compose down

5. Чтобы выполнить команды управления внутри Docker-контейнера:
   Выполните в терминале:
   docker-compose exec web python manage.py <ваша_команда>
   Пример:
   docker-compose exec web python manage.py migrate

Доступ к размещенной версии:

Проект также развернут и доступен онлайн. Маршрутизация домена настроена, поэтому вы можете получить к нему доступ по его публичному URL (например, yourdomain.com). Конкретные детали о размещенной среде и URL следует получить у администратора проекта.

ЗАПУСК ТЕСТОВ

Проект использует комбинацию встроенного фреймворка тестирования Django и Pytest, с Allure для отчетности.

Генерация тестовых данных:

Доступны пользовательские команды управления для заполнения базы данных тестовыми данными:
* Генерация тестовых платежей:
  Выполните в терминале:
  python manage.py generate_test_payments <количество_платежей>
  Пример: python manage.py generate_test_payments 100
* Генерация тестовых отзывов:
  Выполните в терминале:
  python manage.py generate_test_reviews <количество_отзывов>
  Пример: python manage.py generate_test_reviews 50

  Если запускаете с Docker, добавьте префикс docker-compose exec web:
  docker-compose exec web python manage.py generate_test_payments 100
  docker-compose exec web python manage.py generate_test_reviews 50

Запуск тестов Django:

Для запуска тестов с использованием нативного тест-раннера Django:
Выполните в терминале:
python manage.py test
Вы также можете указать конкретные приложения или тестовые случаи:
python manage.py test apps.accounts
python manage.py test apps.payments.tests.test_views.PaymentViewTests

Запуск Pytest:

Pytest настроен для этого проекта и предлагает более продвинутые функции тестирования.
1. Убедитесь, что Pytest и необходимые плагины установлены (они должны быть в requirements.txt):
   Выполните в терминале:
   pip install pytest pytest-django allure-pytest

2. Запустите Pytest:
   Выполните в терминале:
   pytest
   Эта команда обнаружит и запустит тесты в соответствии с конфигурацией в pytest.ini.
   По умолчанию данные отчета Allure будут сгенерированы в каталоге reports/allure-results.

Просмотр отчетов Allure:

Allure предоставляет подробные отчеты о тестах.
1. Сгенерируйте отчет Allure:
   После запуска pytest (который генерирует результаты Allure), вам необходимо сгенерировать HTML-отчет. Возможно, сначала потребуется установить Allure command-line tool.
   (См. документацию Allure для установки: https://docs.qameta.io/allure/#_installing_a_commandline)

   Выполните в терминале:
   allure generate reports/allure-results --clean -o reports/allure-report

2. Откройте отчет Allure:
   Выполните в терминале:
   allure open reports/allure-report
   Это откроет отчет в вашем веб-браузере.

Использование SQLite3 для тестирования:

Для более быстрого локального тестирования или в средах CI, где настройка PostgreSQL может быть сложной, вы можете временно переключиться на SQLite3.
1. Измените ваш файл .env (или создайте временный для тестирования):
   Закомментируйте DATABASE_URL для PostgreSQL и добавьте один для SQLite:
   # DATABASE_URL=postgres://user:password@host:port/dbname
   DATABASE_URL=sqlite:///db.sqlite3

2. Убедитесь, что psycopg2-binary не является жестким требованием для этой настройки, или обработайте его отсутствие корректно, если Django попытается импортировать его, когда движком является sqlite3. Обычно Django хорошо справляется с этим, если ENGINE в настройках правильно определяется из DATABASE_URL.

3. Выполните миграции для SQLite (если это новая база данных):
   Выполните в терминале:
   python manage.py migrate

4. Запустите тесты как обычно:
   Выполните в терминале:
   python manage.py test
   или
   pytest

5. Не забудьте вернуть DATABASE_URL в вашем файле .env обратно на PostgreSQL для использования в разработке или на продакшене.

МИГРАЦИИ БАЗЫ ДАННЫХ

Каждый раз, когда в моделях базы данных происходят изменения, необходимо создавать и применять миграции.
1. Создайте миграции:
   Выполните в терминале:
   python manage.py makemigrations <имя_приложения_если_конкретное>
   Пример: python manage.py makemigrations apps.accounts
   Или для всех приложений: python manage.py makemigrations

2. Примените миграции:
   Выполните в терминале:
   python manage.py migrate

СТАТИЧЕСКИЕ ФАЙЛЫ

Во время разработки с DEBUG=True Django обычно обслуживает статические файлы автоматически. Для продакшена или когда DEBUG=False:
Выполните в терминале:
python manage.py collectstatic --noinput
Эта команда собирает статические файлы из всех приложений в каталог, указанный в STATIC_ROOT в ваших настройках. Убедитесь, что ваш веб-сервер (например, Nginx) настроен на обслуживание файлов из этого каталога.