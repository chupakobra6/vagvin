Project Structure Overview: vagvin
===
apps/
    pages/
        urls.py
        views.py
    payments/
        admin.py
        models.py
        urls.py
        views.py
vagvin/
    settings.py
    urls.py

===

File: apps\pages\urls.py
===
from django.urls import path
from .views import (
    home_view, about_view, faq_view, requisites_view,
    examples_view, reviews_view, login_view,
    privacy_policy_view, payment_rules_view
)

app_name = 'pages'

urlpatterns = [
    path('', home_view, name='home'),
    path('about/', about_view, name='about'),
    path('faq/', faq_view, name='faq'),
    path('requisites/', requisites_view, name='requisites'),
    path('examples/', examples_view, name='examples'),
    path('reviews/', reviews_view, name='reviews'),
    path('login/', login_view, name='login'),
    path('privacy-policy/', privacy_policy_view, name='privacy_policy'),
    path('payment-rules/', payment_rules_view, name='payment_rules'),
]


===

File: apps\pages\views.py
===
from django.shortcuts import render

def home_view(request):
    return render(request, 'pages/home.html')

def about_view(request):
    return render(request, 'pages/about.html')

def faq_view(request):
    return render(request, 'pages/faq.html')

def requisites_view(request):
    return render(request, 'pages/requisites.html')

def examples_view(request):
    return render(request, 'pages/examples.html')

def reviews_view(request):
    return render(request, 'pages/reviews.html')

def login_view(request):
    return render(request, 'pages/login.html')

def privacy_policy_view(request):
    return render(request, 'pages/privacy_policy.html')
    
def payment_rules_view(request):
    return render(request, 'pages/payment_rules.html')


===

File: apps\payments\admin.py
===
from django.contrib import admin
from .models import Payment


@admin.register(Payment)
class PaymentAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'provider', 'amount', 'total_amount', 'status', 'created_at')
    list_filter = ('provider', 'status', 'created_at')
    search_fields = ('user__username', 'user__email', 'invoice_id')
    date_hierarchy = 'created_at'
    readonly_fields = ('invoice_id', 'created_at', 'updated_at')
    list_per_page = 20
    
    fieldsets = (
        ('Основная информация', {
            'fields': ('user', 'provider', 'status', 'invoice_id')
        }),
        ('Финансовая информация', {
            'fields': ('amount', 'total_amount')
        }),
        ('Временные метки', {
            'fields': ('created_at', 'updated_at')
        }),
    ) 

===

File: apps\payments\models.py
===
from django.db import models
from django.conf import settings
from django.utils import timezone


class BaseModel(models.Model):
    created_at = models.DateTimeField(default=timezone.now, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')

    class Meta:
        abstract = True

class Payment(BaseModel):
    PROVIDER_CHOICES = [
        ('robokassa', 'Robokassa'),
        ('yookassa', 'YooKassa'),
    ]
    
    STATUS_CHOICES = [
        ('pending', 'Ожидает оплаты'),
        ('success', 'Успешно'),
        ('failed', 'Ошибка'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Пользователь')
    provider = models.CharField(max_length=20, choices=PROVIDER_CHOICES, verbose_name='Платежная система')
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Сумма')
    total_amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Сумма с комиссией')
    invoice_id = models.CharField(max_length=100, unique=True, verbose_name='Идентификатор платежа')
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending', verbose_name='Статус')
    
    class Meta:
        verbose_name = 'Платеж'
        verbose_name_plural = 'Платежи'
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.user} → {self.provider} {self.amount} руб. ({self.get_status_display()})"
    
    def apply_commission(self, rate=0.12):
        """Применить комиссию к сумме платежа"""
        if not self.total_amount:
            self.total_amount = round(float(self.amount) * (1 + rate), 2)
            self.save(update_fields=['total_amount'])
        return self.total_amount

===

File: apps\payments\urls.py
===
from django.urls import path
from . import views

app_name = 'payments'

urlpatterns = [
    # Страница оплаты
    path('', views.PaymentFormView.as_view(), name='payment_form'),
    
    # Маршруты для Robokassa
    path('robokassa/initiate/', views.InitiateRobokassaPaymentView.as_view(), name='robokassa_initiate'),
    path('robokassa/callback/', views.RobokassaCallbackView.as_view(), name='robokassa_callback'),
    path('status/<int:payment_id>/', views.PaymentStatusView.as_view(), name='payment_status'),
] 

===

File: apps\payments\views.py
===
from django.shortcuts import render
from django.http import JsonResponse, HttpResponse
from django.views import View
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from django.conf import settings
import json

from .services import create_robokassa_payment, verify_robokassa_callback


class PaymentFormView(View):
    """Представление для отображения формы оплаты"""
    
    @method_decorator(login_required)
    def get(self, request):
        return render(request, 'payments/payment_form.html')


class InitiateRobokassaPaymentView(View):
    """Представление для инициализации платежа через Robokassa"""
    
    @method_decorator(login_required)
    def post(self, request):
        try:
            # Получаем данные из запроса
            data = json.loads(request.body) if request.body else request.POST
            amount = float(data.get('amount', 0))
            
            if amount <= 0:
                return JsonResponse({'error': 'Сумма должна быть положительной'}, status=400)
            
            # Создаем платеж
            payment, payment_url = create_robokassa_payment(request.user, amount)
            
            return JsonResponse({
                'success': True,
                'payment_url': payment_url,
                'payment_id': payment.id
            })
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)


@method_decorator(csrf_exempt, name='dispatch')
class RobokassaCallbackView(View):
    """Представление для обработки уведомлений от Robokassa"""
    
    def get(self, request):
        # Проверяем IP-адрес (если настроена фильтрация по IP)
        if hasattr(settings, 'ALLOWED_ROBOKASSA_IPS') and request.META.get('REMOTE_ADDR') not in settings.ALLOWED_ROBOKASSA_IPS:
            return HttpResponse("Invalid IP", status=403)
        
        params = request.GET.dict()
        payment, is_valid = verify_robokassa_callback(params)
        
        if not payment:
            return HttpResponse("Invalid payment", status=400)
        
        if is_valid:
            # Платеж успешно проверен
            return HttpResponse("OK" + str(payment.id))
        else:
            # Ошибка проверки платежа
            return HttpResponse("Invalid signature", status=400)
    
    def post(self, request):
        # Обработка POST-запросов (если используются)
        return self.get(request)


class PaymentStatusView(View):
    """Представление для проверки статуса платежа"""
    
    @method_decorator(login_required)
    def get(self, request, payment_id):
        from .models import Payment
        
        try:
            payment = Payment.objects.get(id=payment_id, user=request.user)
            return JsonResponse({
                'success': True,
                'status': payment.status,
                'amount': float(payment.amount),
                'total_amount': float(payment.total_amount),
                'created_at': payment.created_at.isoformat()
            })
        except Payment.DoesNotExist:
            return JsonResponse({
                'success': False,
                'error': 'Платеж не найден'
            }, status=404)


===

File: vagvin\settings.py
===
"""
Django settings for vagvin project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # Django core libs
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party libs
    'rest_framework',
    # Local apps
    'apps.pages.apps.PagesConfig',
    'apps.payments.apps.PaymentsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vagvin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vagvin.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Robokassa settings
ROBOKASSA_LOGIN = os.getenv('ROBOKASSA_LOGIN', '')
ROBOKASSA_PASSWORD1 = os.getenv('ROBOKASSA_PASSWORD1', '')  # Пароль #1 для генерации ссылки
ROBOKASSA_PASSWORD2 = os.getenv('ROBOKASSA_PASSWORD2', '')  # Пароль #2 для проверки уведомлений
ALLOWED_ROBOKASSA_IPS = os.getenv('ALLOWED_ROBOKASSA_IPS', '').split(',') if os.getenv('ALLOWED_ROBOKASSA_IPS') else []

# YooKassa settings
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID', '')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY', '')


===

File: vagvin\urls.py
===
"""
URL configuration for vagvin project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('apps.pages.urls')),
    path('payments/', include('apps.payments.urls')),
]


===

